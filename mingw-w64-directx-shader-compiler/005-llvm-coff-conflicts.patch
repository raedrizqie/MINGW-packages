diff --git a/include/llvm/Object/COFF.h b/include/llvm/Object/COFF.h
index 025a9dbc..d9d24d7c 100644
--- a/include/llvm/Object/COFF.h
+++ b/include/llvm/Object/COFF.h
@@ -20,6 +20,8 @@
 #include "llvm/Support/Endian.h"
 #include "llvm/Support/ErrorOr.h"
 
+using namespace llvm::COFF;
+
 namespace llvm {
 template <typename T> class ArrayRef;
 
@@ -334,31 +336,31 @@ public:
   }
 
   bool isExternal() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_EXTERNAL;
+    return getStorageClass() == IMAGE_SYM_CLASS_EXTERNAL;
   }
 
   bool isCommon() const {
-    return isExternal() && getSectionNumber() == COFF::IMAGE_SYM_UNDEFINED &&
+    return isExternal() && getSectionNumber() == IMAGE_SYM_UNDEFINED &&
            getValue() != 0;
   }
 
   bool isUndefined() const {
-    return isExternal() && getSectionNumber() == COFF::IMAGE_SYM_UNDEFINED &&
+    return isExternal() && getSectionNumber() == IMAGE_SYM_UNDEFINED &&
            getValue() == 0;
   }
 
   bool isWeakExternal() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_WEAK_EXTERNAL;
+    return getStorageClass() == IMAGE_SYM_CLASS_WEAK_EXTERNAL;
   }
 
   bool isFunctionDefinition() const {
-    return isExternal() && getBaseType() == COFF::IMAGE_SYM_TYPE_NULL &&
-           getComplexType() == COFF::IMAGE_SYM_DTYPE_FUNCTION &&
+    return isExternal() && getBaseType() == IMAGE_SYM_TYPE_NULL &&
+           getComplexType() == IMAGE_SYM_DTYPE_FUNCTION &&
            !COFF::isReservedSectionNumber(getSectionNumber());
   }
 
   bool isFunctionLineInfo() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_FUNCTION;
+    return getStorageClass() == IMAGE_SYM_CLASS_FUNCTION;
   }
 
   bool isAnyUndefined() const {
@@ -366,27 +368,27 @@ public:
   }
 
   bool isFileRecord() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_FILE;
+    return getStorageClass() == IMAGE_SYM_CLASS_FILE;
   }
 
   bool isSection() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_SECTION;
+    return getStorageClass() == IMAGE_SYM_CLASS_SECTION;
   }
 
   bool isSectionDefinition() const {
     // C++/CLI creates external ABS symbols for non-const appdomain globals.
     // These are also followed by an auxiliary section definition.
     bool isAppdomainGlobal =
-        getStorageClass() == COFF::IMAGE_SYM_CLASS_EXTERNAL &&
-        getSectionNumber() == COFF::IMAGE_SYM_ABSOLUTE;
-    bool isOrdinarySection = getStorageClass() == COFF::IMAGE_SYM_CLASS_STATIC;
+        getStorageClass() == IMAGE_SYM_CLASS_EXTERNAL &&
+        getSectionNumber() == IMAGE_SYM_ABSOLUTE;
+    bool isOrdinarySection = getStorageClass() == IMAGE_SYM_CLASS_STATIC;
     if (!getNumberOfAuxSymbols())
       return false;
     return isAppdomainGlobal || isOrdinarySection;
   }
 
   bool isCLRToken() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_CLR_TOKEN;
+    return getStorageClass() == IMAGE_SYM_CLASS_CLR_TOKEN;
   }
 
 private:
@@ -411,7 +413,7 @@ struct coff_section {
   // Returns true if the actual number of relocations is stored in
   // VirtualAddress field of the first relocation table entry.
   bool hasExtendedRelocations() const {
-    return (Characteristics & COFF::IMAGE_SCN_LNK_NRELOC_OVFL) &&
+    return (Characteristics & IMAGE_SCN_LNK_NRELOC_OVFL) &&
            NumberOfRelocations == UINT16_MAX;
   }
 };
diff --git a/include/llvm/Object/RelocVisitor.h b/include/llvm/Object/RelocVisitor.h
index d5e4258c..4b6b22d2 100644
--- a/include/llvm/Object/RelocVisitor.h
+++ b/include/llvm/Object/RelocVisitor.h
@@ -26,6 +26,8 @@
 #include "llvm/Support/MachO.h"
 #include "llvm/Support/raw_ostream.h"
 
+using namespace llvm::COFF;
+
 namespace llvm {
 namespace object {
 
@@ -206,17 +208,17 @@ private:
     switch (ObjToVisit.getArch()) {
     case Triple::x86:
       switch (RelocType) {
-      case COFF::IMAGE_REL_I386_SECREL:
+      case IMAGE_REL_I386_SECREL:
         return visitCOFF_I386_SECREL(R, Value);
-      case COFF::IMAGE_REL_I386_DIR32:
+      case IMAGE_REL_I386_DIR32:
         return visitCOFF_I386_DIR32(R, Value);
       }
       break;
     case Triple::x86_64:
       switch (RelocType) {
-      case COFF::IMAGE_REL_AMD64_SECREL:
+      case IMAGE_REL_AMD64_SECREL:
         return visitCOFF_AMD64_SECREL(R, Value);
-      case COFF::IMAGE_REL_AMD64_ADDR64:
+      case IMAGE_REL_AMD64_ADDR64:
         return visitCOFF_AMD64_ADDR64(R, Value);
       }
       break;
diff --git a/include/llvm/Support/COFF.h b/include/llvm/Support/COFF.h
index 3c5ee069..1128af2a 100644
--- a/include/llvm/Support/COFF.h
+++ b/include/llvm/Support/COFF.h
@@ -80,6 +80,7 @@ namespace COFF {
     uint32_t NumberOfSymbols;
   };
 
+#ifndef __MINGW32__
   enum MachineTypes {
     MT_Invalid = 0xffff,
 
@@ -145,6 +146,7 @@ namespace COFF {
     /// and should be 0.
     IMAGE_FILE_BYTES_REVERSED_HI       = 0x8000
   };
+#endif // __MINGW32__
 
   struct symbol {
     char     Name[NameSize];
@@ -155,6 +157,12 @@ namespace COFF {
     uint8_t  NumberOfAuxSymbols;
   };
 
+#ifdef __MINGW32__
+  enum SymbolComplexType {
+    /// Type is formed as (base + (derived << SCT_COMPLEX_TYPE_SHIFT))
+    SCT_COMPLEX_TYPE_SHIFT   = 4
+  };
+#else
   enum SymbolSectionNumber : int32_t {
     IMAGE_SYM_DEBUG     = -2,
     IMAGE_SYM_ABSOLUTE  = -1,
@@ -226,6 +234,7 @@ namespace COFF {
     /// Type is formed as (base + (derived << SCT_COMPLEX_TYPE_SHIFT))
     SCT_COMPLEX_TYPE_SHIFT   = 4
   };
+#endif // __MINGW32__
 
   enum AuxSymbolType {
     IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
@@ -244,6 +253,7 @@ namespace COFF {
     uint32_t Characteristics;
   };
 
+#ifndef __MINGW32__
   enum SectionCharacteristics : uint32_t {
     SC_Invalid = 0xffffffff,
 
@@ -283,6 +293,7 @@ namespace COFF {
     IMAGE_SCN_MEM_READ               = 0x40000000,
     IMAGE_SCN_MEM_WRITE              = 0x80000000
   };
+#endif // __MINGW32__
 
   struct relocation {
     uint32_t VirtualAddress;
@@ -290,6 +301,7 @@ namespace COFF {
     uint16_t Type;
   };
 
+#ifndef __MINGW32__
   enum RelocationTypeI386 {
     IMAGE_REL_I386_ABSOLUTE = 0x0000,
     IMAGE_REL_I386_DIR16    = 0x0001,
@@ -351,6 +363,7 @@ namespace COFF {
     IMAGE_COMDAT_SELECT_LARGEST,
     IMAGE_COMDAT_SELECT_NEWEST
   };
+#endif // __MINGW32__
 
   // Auxiliary Symbol Formats
   struct AuxiliaryFunctionDefinition {
@@ -375,12 +388,14 @@ namespace COFF {
     uint8_t  unused[10];
   };
 
+#ifndef __MINGW32__
   /// These are not documented in the spec, but are located in WinNT.h.
   enum WeakExternalCharacteristics {
     IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,
     IMAGE_WEAK_EXTERN_SEARCH_LIBRARY   = 2,
     IMAGE_WEAK_EXTERN_SEARCH_ALIAS     = 3
   };
+#endif // __MINGW32__
 
   struct AuxiliarySectionDefinition {
     uint32_t Length;
@@ -541,6 +556,7 @@ namespace COFF {
     NUM_DATA_DIRECTORIES
   };
 
+#ifndef __MINGW32__
   enum WindowsSubsystem {
     IMAGE_SUBSYSTEM_UNKNOWN = 0, ///< An unknown subsystem.
     IMAGE_SUBSYSTEM_NATIVE = 1, ///< Device drivers and native Windows processes
@@ -612,6 +628,7 @@ namespace COFF {
     IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,
     IMAGE_REL_BASED_DIR64          = 10
   };
+#endif // __MINGW32__
 
   enum ImportType {
     IMPORT_CODE  = 0,

diff --git a/src/3rdparty/chromium/chrome/BUILD.gn b/src/3rdparty/chromium/chrome/BUILD.gn
index 8a3d59e..86a13f8 100644
--- a/src/3rdparty/chromium/chrome/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/BUILD.gn
@@ -65,7 +65,7 @@ if (enable_resource_allowlist_generation) {
   chrome_resource_whitelist = "$target_gen_dir/chrome_resource_whitelist.txt"
 }
 
-if (is_win) {
+if (is_msvc) {
   action("reorder_imports") {
     script = "//build/win/reorder-imports.py"
 
@@ -114,7 +114,7 @@ if (!is_android && !is_mac) {
   group("chrome") {
     public_deps = [ ":chrome_initial" ]
     data_deps = [ ":chrome_initial" ]
-    if (is_win) {
+    if (is_msvc) {
       public_deps += [ ":reorder_imports" ]
       data_deps += [ ":reorder_imports" ]
     }
@@ -124,7 +124,7 @@ if (!is_android && !is_mac) {
   }
 
   executable("chrome_initial") {
-    if (is_win) {
+    if (is_msvc) {
       output_name = "initialexe/chrome"
     } else {
       output_name = "chrome"
@@ -362,12 +362,15 @@ if (is_win) {
       "//headless:headless_renderer",
     ]
 
-    configs += [ "//build/config/compiler:chrome_orderfile_config" ]
+    if (is_msvc) {
+        configs += [ "//build/config/compiler:chrome_orderfile_config" ]
+    }
   }
-
-  copy("copy_first_run") {
-    sources = [ "app/FirstRun" ]
-    outputs = [ "$root_out_dir/First Run" ]
+  if (is_msvc) {
+    copy("copy_first_run") {
+      sources = [ "app/FirstRun" ]
+      outputs = [ "$root_out_dir/First Run" ]
+    }
   }
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
diff --git a/src/3rdparty/chromium/chrome/browser/BUILD.gn b/src/3rdparty/chromium/chrome/browser/BUILD.gn
index 8b31283..73655a4 100644
--- a/src/3rdparty/chromium/chrome/browser/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/BUILD.gn
@@ -58,19 +58,21 @@ if (is_win) {
   # ldflags in GN aren't automatically inherited.
   config("browser_win_linker_flags") {
     libs = [
-      "credui.lib",
-      "cryptui.lib",
-      "dwmapi.lib",
-      "netapi32.lib",
-      "ndfapi.lib",  # For browser / net / net_error_diagnostics_dialog_win.h
-      "pdh.lib",  # For browser / private_working_set_snapshot.h
-      "wbemuuid.lib",  # For browser / metrics /
+      "credui",
+      "cryptui",
+      "dwmapi",
+      "netapi32",
+      "ndfapi",  # For browser / net / net_error_diagnostics_dialog_win.h
+      "pdh",  # For browser / private_working_set_snapshot.h
+      "wbemuuid",  # For browser / metrics /
                        # antivirus_metrics_provider_win.cc
     ]
-    ldflags = [
-      "/DELAYLOAD:ndfapi.dll",
-      "/DELAYLOAD:pdh.dll",  # The task manager is rarely used.
-    ]
+    if (is_msvc) {
+      ldflags = [
+        "/DELAYLOAD:ndfapi.dll",
+        "/DELAYLOAD:pdh.dll",  # The task manager is rarely used.
+      ]
+    }
   }
 }
 
@@ -4793,7 +4795,7 @@ static_library("browser") {
     deps += [ "//chrome/app:shutdown_signal_handlers" ]
   }
 
-  if (is_win || is_mac) {
+  if (is_msvc || is_mac) {
     # Sources(generally "desktop OS importers") used only on Mac & Windows.
     sources += [
       "recovery/recovery_install_global_error.cc",
diff --git a/src/3rdparty/chromium/chrome/browser/image_decoder/BUILD.gn b/src/3rdparty/chromium/chrome/browser/image_decoder/BUILD.gn
index 101a478..b7e0627 100644
--- a/src/3rdparty/chromium/chrome/browser/image_decoder/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/image_decoder/BUILD.gn
@@ -21,7 +21,7 @@ source_set("image_decoder") {
   ]
 }
 
-if (!is_android) {
+if (!is_android && !is_mingw) {
   source_set("browser_tests") {
     testonly = true
 
diff --git a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
index 42ab215..3fdec27 100644
--- a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
@@ -86,6 +86,6 @@ static_library("discovery") {
 
   if (is_win) {
     sources += [ "discovery_network_list_win.cc" ]
-    libs = [ "iphlpapi.lib" ]
+    libs = [ "iphlpapi" ]
   }
 }
diff --git a/src/3rdparty/chromium/chrome/browser/payments/BUILD.gn b/src/3rdparty/chromium/chrome/browser/payments/BUILD.gn
index d362eb0..5dcb27c 100644
--- a/src/3rdparty/chromium/chrome/browser/payments/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/payments/BUILD.gn
@@ -55,7 +55,7 @@ source_set("browsertests") {
     deps += [ "//components/payments/content/android" ]
   }
 
-  if (!is_android) {
+  if (!is_android && !is_mingw) {
     sources += [
       "manifest_verifier_browsertest.cc",
       "payment_manifest_parser_browsertest.cc",
diff --git a/src/3rdparty/chromium/chrome/browser/privacy_budget/BUILD.gn b/src/3rdparty/chromium/chrome/browser/privacy_budget/BUILD.gn
index 147fbd0..e56a9b7 100644
--- a/src/3rdparty/chromium/chrome/browser/privacy_budget/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/privacy_budget/BUILD.gn
@@ -78,7 +78,7 @@ source_set("browser_tests") {
 
   if (is_android) {
     deps += [ "//chrome/test:test_support_ui_android" ]
-  } else {
+  } else if (!is_mingw) {
     deps += [ "//chrome/test:test_support_ui" ]
   }
 
diff --git a/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn b/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn
index d6effec..0ad7e60 100644
--- a/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn
@@ -4691,9 +4691,11 @@ static_library("test_support") {
 
   if (enable_extensions) {
     deps += [
-      "//chrome/test:test_support_ui",
       "//extensions/browser",
     ]
+    if (!is_mingw) {
+      deps += [ "//chrome/test:test_support_ui" ]
+    }
   }
 }
 
diff --git a/src/3rdparty/chromium/chrome/browser/web_applications/BUILD.gn b/src/3rdparty/chromium/chrome/browser/web_applications/BUILD.gn
index 9feb99f..55ee551 100644
--- a/src/3rdparty/chromium/chrome/browser/web_applications/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/web_applications/BUILD.gn
@@ -287,13 +287,16 @@ source_set("web_applications_browser_tests") {
     "//chrome/browser/web_applications/components",
     "//chrome/browser/web_applications/extensions",
     "//chrome/test:test_support",
-    "//chrome/test:test_support_ui",
     "//components/permissions:permissions",
     "//components/services/app_service/public/cpp:app_update",
     "//components/services/app_service/public/cpp:intents",
     "//extensions/browser:test_support",
   ]
 
+  if (!is_mingw) {
+    deps += [ "//chrome/test:test_support_ui" ]
+  }
+
   if (is_chromeos) {
     deps += [
       "//chrome/browser/chromeos",
diff --git a/src/3rdparty/chromium/chrome/browser/web_applications/components/BUILD.gn b/src/3rdparty/chromium/chrome/browser/web_applications/components/BUILD.gn
index 031345d..e291016 100644
--- a/src/3rdparty/chromium/chrome/browser/web_applications/components/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/web_applications/components/BUILD.gn
@@ -234,7 +234,10 @@ source_set("browser_tests") {
     ":components",
     "//chrome/browser/web_applications:web_applications_test_support",
     "//chrome/test:test_support",
-    "//chrome/test:test_support_ui",
     "//net:test_support",
   ]
+
+  if (!is_mingw) {
+    deps += [ "//chrome/test:test_support_ui" ]
+  }
 }
diff --git a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
index 57d9c72..b695d77 100644
--- a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
@@ -30,7 +30,7 @@ source_set("module_info") {
 
   deps = [ "//base:i18n" ]
 
-  libs = [ "crypt32.lib" ]
+  libs = [ "crypt32" ]
 
   if (safe_browsing_mode == 1) {
     deps += [
diff --git a/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn
index 7768734..fb06bf6 100644
--- a/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn
@@ -47,11 +47,11 @@ template("chrome_cleaner_executable") {
     }
 
     libs = [
-      "crypt32.lib",
-      "mstask.lib",
-      "ntdll.lib",
-      "taskschd.lib",
-      "wintrust.lib",
+      "crypt32",
+      "mstask",
+      "ntdll",
+      "taskschd",
+      "wintrust",
     ]
     if (defined(invoker.libs)) {
       libs += invoker.libs
@@ -96,7 +96,7 @@ template("chrome_cleaner_executable") {
 chrome_cleaner_executable("chrome_cleanup_tool") {
   sources = [ "chrome_cleaner_main.cc" ]
 
-  libs = [ "comctl32.lib" ]
+  libs = [ "comctl32" ]
 
   deps = [
     "//chrome/chrome_cleaner/cleaner:cleaner_headers",
diff --git a/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn
index bd84eed..389a1e2 100644
--- a/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn
@@ -25,7 +25,7 @@ source_set("http") {
     "user_agent.h",
   ]
 
-  libs = [ "Winhttp.lib" ]
+  libs = [ "winhttp" ]
 
   deps = [
     "//base",
diff --git a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
index 9b08e23..87254c4 100644
--- a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
@@ -85,7 +85,7 @@ shared_library("chrome_elf") {
     "//build/config/win:delayloads_not_for_child_dll",
   ]
 
-  if (current_cpu == "x86") {
+  if (is_msvc && current_cpu == "x86") {
     # Don"t set an x64 base address (to avoid breaking HE-ASLR).
     ldflags = [ "/BASE:0x01c20000" ]
   }
@@ -161,7 +161,7 @@ static_library("nt_registry") {
     "nt_registry/nt_registry.h",
   ]
 
-  libs = [ "kernel32.lib" ]
+  libs = [ "kernel32" ]
 }
 
 source_set("pe_image_safe") {
diff --git a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
index d8a99b2..8a14d8b 100644
--- a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
@@ -13,7 +13,7 @@ buildflag_header("buildflags") {
   flags = [ "ZUCCHINI=$use_zucchini" ]
 }
 
-if (is_win) {
+if (is_msvc) {
   executable("setup") {
     sources = [
       "setup.ico",
diff --git a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
index 4d66944..4a16352 100644
--- a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
@@ -61,7 +61,7 @@ static_library("with_no_strings") {
   # targets have to be linked together in practice.
   allow_circular_includes_from = [ "//chrome/common:constants" ]
 
-  if (is_win) {
+  if (is_msvc) {
     sources = [
       "delete_after_reboot_helper.cc",
       "delete_after_reboot_helper.h",
@@ -261,7 +261,7 @@ source_set("constants") {
   }
 }
 
-if (is_win) {
+if (is_msvc) {
   source_set("did_run_support") {
     public = [ "update_did_run_state.h" ]
 
diff --git a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
index 4a32c96..59ca837 100644
--- a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
@@ -8,6 +8,7 @@ import("//chrome/process_version_rc_template.gni")
 import("//testing/test.gni")
 
 executable("notification_helper") {
+  if (is_msvc) {
   sources = [
     "notification_helper.cc",
     "notification_helper.rc",
@@ -32,6 +33,7 @@ executable("notification_helper") {
   ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
 
 source_set("lib") {
@@ -67,6 +69,7 @@ process_version_rc_template("version_resources") {
 }
 
 test("notification_helper_unittests") {
+  if (is_msvc) {
   use_xvfb = use_xvfb_in_this_config
 
   sources = [
@@ -89,4 +92,5 @@ test("notification_helper_unittests") {
   data_deps = [ ":notification_helper" ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
diff --git a/src/3rdparty/chromium/chrome/test/BUILD.gn b/src/3rdparty/chromium/chrome/test/BUILD.gn
index 1a369fa..204b58a 100644
--- a/src/3rdparty/chromium/chrome/test/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/test/BUILD.gn
@@ -316,7 +316,7 @@ static_library("test_support") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "../browser/webshare/win/fake_data_transfer_manager.cc",
       "../browser/webshare/win/fake_data_transfer_manager.h",
@@ -720,7 +720,7 @@ static_library("browser_tests_runner") {
   }
 }
 
-if (!is_android) {
+if (!is_android && !is_mingw) {
   test("browser_tests") {
     use_xvfb = use_xvfb_in_this_config
 
@@ -3126,7 +3126,7 @@ if (chromeos_is_browser_only) {
   }
 }
 
-if (is_linux || is_chromeos || is_mac || is_win) {
+if (is_linux || is_chromeos || is_mac || is_msvc) {
   import("//tools/binary_size/sizes.gni")
 
   group("browser_tests_apprtc") {
@@ -3223,14 +3223,14 @@ group("performance_test_suite") {
     data_deps += [ "//third_party/dawn/src/tests:dawn_perf_tests" ]
   }
 
-  if (!is_android && !is_fuchsia) {
+  if (!is_android && !is_fuchsia && !is_mingw) {
     data_deps += [
       "//chrome/test:load_library_perf_tests",
       "//ui/views:views_perftests",
     ]
   }
 
-  if (!is_android) {
+  if (!is_android && !is_mingw) {
     data_deps += [ "//chrome/test:performance_browser_tests" ]
   }
 
@@ -4633,7 +4633,7 @@ test("unit_tests") {
     }
   }
 
-  if (!is_android) {
+  if (!is_android && !is_mingw) {
     sources += [
       "../browser/apps/app_service/app_icon_factory_unittest.cc",
       "../browser/apps/app_service/app_service_proxy_unittest.cc",
@@ -4711,7 +4711,7 @@ test("unit_tests") {
       sources += [ "../browser/notifications/notification_platform_bridge_linux_unittest.cc" ]
     }
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "../browser/notifications/notification_platform_bridge_win_unittest.cc",
         "../browser/notifications/win/notification_helper_launches_chrome_unittest.cc",
@@ -6009,7 +6009,7 @@ static_library("test_support_unit") {
   }
 }
 
-if (!is_android) {
+if (!is_android && !is_mingw) {
   static_library("test_support_ui") {
     defines = []
     testonly = true
@@ -6486,7 +6486,7 @@ if (!is_android) {
       ]
     }
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "../browser/downgrade/user_data_downgrade_browsertest.cc",
         "../browser/notifications/notification_platform_bridge_win_interactive_uitest.cc",
@@ -6615,7 +6615,7 @@ test("chrome_app_unittests") {
   }
 }
 
-if (!is_android) {
+if (!is_android && !is_mingw) {
   # Everything needed to build/copy to run the performance_browser_tests isolate.
   # See: //testing/buildbot/gn_isolate_map.pyl
   group("performance_browser_tests") {
@@ -6814,7 +6814,7 @@ if (!is_fuchsia) {
   }
 }
 
-if (!is_fuchsia && !is_android) {
+if (!is_fuchsia && !is_android && !is_mingw) {
   test("sync_integration_tests") {
     use_xvfb = use_xvfb_in_this_config
 
@@ -7363,7 +7363,7 @@ group("closure_compile") {
 # because many of the Windows tests have specific hardware requirements, and
 # it's cleaner to just have a separate target we can compile only on supported
 # configurations instead of trying to conditionally skip tests.
-if (!is_android) {
+if (!is_android && !is_mingw) {
   group("xr_browser_tests") {
     testonly = true
     data_deps = [
diff --git a/src/3rdparty/chromium/chrome/test/data/BUILD.gn b/src/3rdparty/chromium/chrome/test/data/BUILD.gn
index 066ee8f..3a48b52 100644
--- a/src/3rdparty/chromium/chrome/test/data/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/test/data/BUILD.gn
@@ -41,7 +41,7 @@ group("closure_compile") {
   if (enable_pdf) {
     deps += [ "pdf:closure_compile" ]
   }
-  if (!is_android) {
+  if (!is_android && !is_mingw) {
     deps += [ "webui:closure_compile" ]
   }
 }
diff --git a/src/3rdparty/chromium/chrome/test/payments/BUILD.gn b/src/3rdparty/chromium/chrome/test/payments/BUILD.gn
index f64f8f0..92a58c7 100644
--- a/src/3rdparty/chromium/chrome/test/payments/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/test/payments/BUILD.gn
@@ -38,7 +38,7 @@ static_library("test_support") {
     ]
   }
 
-  if (!is_android) {
+  if (!is_android && !is_mingw) {
     sources += [ "payment_request_test_controller_desktop.cc" ]
 
     deps += [
diff --git a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
index f8286c3..4d2ed7f 100644
--- a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
@@ -20,6 +20,9 @@ source_set("lib") {
     "hunspell_reader.h",
   ]
   configs += [ "//build/config/compiler:wexit_time_destructors" ]
+  if (is_mingw) {
+    ldflags = [ "-municode" ]
+  }
   deps = [
     "//base",
     "//base:i18n",
diff --git a/src/3rdparty/chromium/chrome/updater/BUILD.gn b/src/3rdparty/chromium/chrome/updater/BUILD.gn
index be742de..6717c4b 100644
--- a/src/3rdparty/chromium/chrome/updater/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/updater/BUILD.gn
@@ -14,20 +14,20 @@ import("//testing/test.gni")
 
 # TODO(sorin): make the code build on Linux. https://crbug.com/1014320
 group("updater") {
-  if (is_win) {
+  if (is_msvc) {
     deps = [ "//chrome/updater/win" ]
   }
   if (is_mac) {
     deps = [ "//chrome/updater/mac" ]
   }
-  if (is_win || is_mac) {
+  if (is_msvc || is_mac) {
     deps += [ "//chrome/updater/tools:tools" ]
   }
 }
 
 # Conditional build is needed, otherwise the analyze script on Linux
 # requires all targets and it is going to include the targets below.
-if (is_win || is_mac) {
+if (is_msvc || is_mac) {
   # This target must only have platform-neutral sources. Generally speaking,
   # these sources are related to common, cross-platfrom aspects of the code,
   # such as crash handling, or interfaces to cross platform dependencies from

# Contributor: Raed Rizqie <raed.rizqie@gmail.com>

_realname=qt5-webengine
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-debug")
pkgver=5.15.17
pkgrel=1
pkgdesc='Qt5 support for web applications using the Chromium browser project'
arch=(any)
mingw_arch=('ucrt64')
msys2_references=(
  'archlinux: qt5-webengine'
)
url='https://www.qt.io'
license=('spdx:BSD-3-Clause AND GFDL-1.3-no-invariants-only AND GPL-2.0-only AND GPL-3.0-only AND LGPL-3.0-only' 'custom')
depends=("${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-icu"
         "${MINGW_PACKAGE_PREFIX}-lcms2"
         "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libvpx"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-libxml2"
         "${MINGW_PACKAGE_PREFIX}-libxslt"
         "${MINGW_PACKAGE_PREFIX}-minizip"
         "${MINGW_PACKAGE_PREFIX}-nss"
         "${MINGW_PACKAGE_PREFIX}-openjpeg2"
         "${MINGW_PACKAGE_PREFIX}-opus"
         "${MINGW_PACKAGE_PREFIX}-snappy"
         "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-gperf"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-nodejs"
             "${MINGW_PACKAGE_PREFIX}-pkgconf"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-python-html5lib"
             "${MINGW_PACKAGE_PREFIX}-qt5-base"
             "${MINGW_PACKAGE_PREFIX}-qt5-declarative"
             "${MINGW_PACKAGE_PREFIX}-qt5-location"
             "${MINGW_PACKAGE_PREFIX}-qt5-tools"
             "${MINGW_PACKAGE_PREFIX}-qt5-webchannel"
             "rsync")
_pkgfn="${_realname/5-/}-everywhere-opensource-src-${pkgver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/${pkgver}/submodules/${_pkgfn}.tar.xz"
        0001-qmake-configure-fixes.patch
        0002-chromium-add-mingw-toolchain.patch
        0003-chromium-base.patch
        0004-chromium-chrome.patch
        0005-chromium-components.patch
        0006-chromium-content.patch
        0007-chromium-device.patch
        0008-chromium-gpu.patch
        0009-chromium-media.patch
        0010-chromium-net.patch
        0011-chromium-sandbox.patch
        0012-chromium-services.patch
        0013-chromium-tools.patch
        0014-chromium-ui.patch
        0015-chromium-v8.patch
        0016-chromium-others.patch
        0101-chromium-third-party-angle.patch
        0102-chromium-third-party-blink.patch
        0103-chromium-third-party-breakpad.patch
        0104-chromium-third-party-crashpad.patch
        0105-chromium-third-party-ffmpeg.patch
        0106-chromium-third-party-pdfium.patch
        0107-chromium-third-party-perfetto.patch
        0108-chromium-third-party-skia.patch
        0109-chromium-third-party-vulkan.patch
        0110-chromium-third-party-webrtc.patch
        0111-chromium-third-party-others.patch
        0201-gn-mingw-fixes.patch)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Np1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd ${_pkgfn/-opensource/}

  apply_patch_with_msg \
    0001-qmake-configure-fixes.patch \
    0002-chromium-add-mingw-toolchain.patch \
    0003-chromium-base.patch \
    0004-chromium-chrome.patch \
    0005-chromium-components.patch \
    0006-chromium-content.patch \
    0007-chromium-device.patch \
    0008-chromium-gpu.patch \
    0009-chromium-media.patch \
    0010-chromium-net.patch \
    0011-chromium-sandbox.patch \
    0012-chromium-services.patch \
    0013-chromium-tools.patch \
    0014-chromium-ui.patch \
    0015-chromium-v8.patch \
    0016-chromium-others.patch

  apply_patch_with_msg \
    0101-chromium-third-party-angle.patch \
    0102-chromium-third-party-blink.patch \
    0103-chromium-third-party-breakpad.patch \
    0104-chromium-third-party-crashpad.patch \
    0105-chromium-third-party-ffmpeg.patch \
    0106-chromium-third-party-pdfium.patch \
    0107-chromium-third-party-perfetto.patch \
    0108-chromium-third-party-skia.patch \
    0109-chromium-third-party-vulkan.patch \
    0110-chromium-third-party-webrtc.patch \
    0111-chromium-third-party-others.patch

  apply_patch_with_msg \
    0201-gn-mingw-fixes.patch
}

build() {
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  #export SHELL=sh.exe
  #export EXECSHELL=sh.exe

  qmake ../${_pkgfn/-opensource/} \
    CONFIG+=silent -- \
    -no-build-qtpdf \
    -no-ffmpeg \
    -webengine-icu

  make EXECSHELL=/bin/sh.exe
}

package_qt5-webengine() {
  depends+=("${MINGW_PACKAGE_PREFIX}-qt5-base"
            "${MINGW_PACKAGE_PREFIX}-qt5-declarative"
            "${MINGW_PACKAGE_PREFIX}-qt5-location"
            "${MINGW_PACKAGE_PREFIX}-qt5-webchannel")
  groups=("${MINGW_PACKAGE_PREFIX}-qt5")
  pkgdesc+=' (mingw-w64)'

  cd build-${MSYSTEM}

  # Fix Makefiles
  local PREFIX_WIN=$(cygpath -am ${MINGW_PREFIX})
  find "${srcdir}/build-${MSYSTEM}" -type f \( -name 'Makefile*' \) \
      -exec sed -i -e "s|${PREFIX_WIN:0:2}\$(INSTALL_ROOT|\$(INSTALL_ROOT|g" {} \;
  find "${srcdir}/build-${MSYSTEM}" -type f \( -name 'Makefile*' \) \
      -exec sed -i -e "s|)${PREFIX_WIN:2}|)${MINGW_PREFIX}|g" {} \;

  make INSTALL_ROOT="${pkgdir}" install

  # Separate debug-info files
  rsync -armR --remove-source-files --include="*/" --include="*.debug" --exclude="*" \
    --prune-empty-dirs "${pkgdir}/.${MINGW_PREFIX}" "${srcdir}/${MSYSTEM}-debug/"

  install -d "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}"
  install -Dm644 ../${_pkgfn/-opensource/}/LICENSE* -t "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}"

  # Fix paths in *.pri, *prl and *.pc files:
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m "${pkgdir}"${MINGW_PREFIX})
  local PKGDIR_PREFIX_WIN=$(cygpath -m "${pkgdir}"${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-webengine-debug() {
  depends+=("${MINGW_PACKAGE_PREFIX}-qt5-base-debug"
            "${MINGW_PACKAGE_PREFIX}-qt5-declarative-debug"
            "${MINGW_PACKAGE_PREFIX}-qt5-location-debug"
            "${MINGW_PACKAGE_PREFIX}-qt5-webchannel-debug"
            "${MINGW_PACKAGE_PREFIX}-${_realname}")
  groups=("${MINGW_PACKAGE_PREFIX}-qt5-debug")
  pkgdesc+=' (debug) (mingw-w64)'
  options=('!strip')

  cp -rf "${srcdir}/${MSYSTEM}-debug${MINGW_PREFIX}" "${pkgdir}/"
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;

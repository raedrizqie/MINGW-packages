diff --git a/src/3rdparty/chromium/third_party/angle/BUILD.gn b/src/3rdparty/chromium/third_party/angle/BUILD.gn
index bdd0871..34ff5bc 100644
--- a/src/3rdparty/chromium/third_party/angle/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/angle/BUILD.gn
@@ -326,7 +326,7 @@ config("extra_warnings") {
   }
 
   # Enable more default warnings on Windows.
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/we4244",  # Conversion: possible loss of data.
       "/we4312",  # Conversion: greater size.
@@ -666,7 +666,15 @@ angle_static_library("angle_gpu_info_util") {
     deps += [ "$angle_root/src/common/vulkan:angle_vulkan_entry_points" ]
   }
 
-  if (is_win) {
+  if (is_mingw) {
+    sources += libangle_gpu_info_util_win_sources
+    libs += [
+      "setupapi",
+      "dxgi",
+    ]
+  }
+
+  if (is_msvc) {
     sources += libangle_gpu_info_util_win_sources
     if (!angle_is_winuwp) {
       libs += [ "setupapi.lib" ]
@@ -819,7 +827,7 @@ template("translator_lib") {
       ":angle_version_info",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       # Necessary to suppress some system header xtree warnings in Release.
       # For some reason this warning doesn't get triggered in Chromium
       cflags = [ "/wd4718" ]
@@ -1011,7 +1019,7 @@ config("libANGLE_config") {
   ldflags = []
   defines += [ "LIBANGLE_IMPLEMENTATION" ]
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [ "/wd4530" ]  # C++ exception handler used, but unwind semantics
                              # are not enabled.
   }
@@ -1114,7 +1122,14 @@ angle_source_set("libANGLE_no_vulkan") {
     ":includes",
   ]
 
-  if (is_win && !angle_is_winuwp) {
+  if (is_mingw) {
+    libs += [
+      "gdi32",
+      "user32",
+    ]
+  }
+
+  if (is_msvc && !angle_is_winuwp) {
     libs += [
       "gdi32.lib",
       "user32.lib",
@@ -1146,7 +1161,11 @@ angle_source_set("libANGLE_no_vulkan") {
   }
 
   if (angle_enable_d3d11) {
-    libs += [ "dxguid.lib" ]
+    if (is_mingw) {
+      libs += [ "dxguid" ]
+    } else {
+      libs += [ "dxguid.lib" ]
+    }
   }
 
   if (angle_enable_metal) {
@@ -1531,6 +1550,7 @@ if (angle_enable_gl_desktop_frontend) {
 
 angle_static_library("libGLESv2_static") {
   sources = libglesv2_sources
+  output_name = "libGLESv2"
   if (angle_enable_gl_desktop_frontend) {
     sources += libglesv2_gl_sources
     defines = [ "ANGLE_ENABLE_GL_DESKTOP_FRONTEND" ]
@@ -1676,6 +1696,7 @@ if (angle_enable_vulkan) {
 }
 
 libEGL_template("libEGL_static") {
+  output_name = "libEGL"
   target_type = "angle_static_library"
   public_configs = [ ":angle_static_config" ]
   deps = [ ":libGLESv2_static" ]
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
index d9b666f..58afffe 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
@@ -8,7 +8,9 @@
 //   layer to warm up the cache from disk.
 
 // Include zlib first, otherwise FAR gets defined elsewhere.
+#ifndef USE_SYSTEM_ZLIB
 #define USE_SYSTEM_ZLIB
+#endif
 #include "compression_utils_portable.h"
 
 #include "libANGLE/MemoryProgramCache.h"
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
index 55227c3..5da1f87 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
@@ -27,15 +27,21 @@ angle_source_set("angle_d3d_shared") {
 if (angle_enable_d3d9) {
   config("angle_d3d9_backend_config") {
     defines = [ "ANGLE_ENABLE_D3D9" ]
-    ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    if (is_msvc) {
+      ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    }
   }
 
   angle_source_set("angle_d3d9_backend") {
     sources = d3d9_backend_sources
-    libs = [
-      "d3d9.lib",
-      "delayimp.lib",
-    ]
+    if (is_mingw) {
+      libs = [ "d3d9" ]
+    } else {
+      libs = [
+        "d3d9.lib",
+        "delayimp.lib",
+      ]
+    }
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d9_backend_config" ]
   }
@@ -52,7 +58,11 @@ if (angle_enable_d3d11) {
   angle_source_set("angle_d3d11_backend") {
     sources = d3d11_backend_sources
 
-    libs = [ "dxguid.lib" ]
+    if (is_mingw) {
+      libs = [ "dxguid" ]
+    } else {
+      libs = [ "dxguid.lib" ]
+    }
 
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d11_backend_config" ]
diff --git a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
index 95a888c..048508d 100644
--- a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
+++ b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
@@ -13,7 +13,7 @@
 
 // See util/util_export.h for details on import/export labels.
 #if !defined(ANGLE_TRACE_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_TRACE_IMPLEMENTATION)
 #            define ANGLE_TRACE_EXPORT __declspec(dllexport)
 #        else
@@ -27,7 +27,7 @@
 #endif  // !defined(ANGLE_TRACE_EXPORT)
 
 #if !defined(ANGLE_TRACE_LOADER_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_TRACE_LOADER_IMPLEMENTATION)
 #            define ANGLE_TRACE_LOADER_EXPORT __declspec(dllexport)
 #        else
@@ -41,7 +41,7 @@
 #endif  // !defined(ANGLE_TRACE_LOADER_EXPORT)
 
 #if !defined(ANGLE_REPLAY_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_REPLAY_IMPLEMENTATION)
 #            define ANGLE_REPLAY_EXPORT __declspec(dllexport)
 #        else
diff --git a/src/3rdparty/chromium/third_party/angle/util/util_export.h b/src/3rdparty/chromium/third_party/angle/util/util_export.h
index 36fb6b7..8cd58b4 100644
--- a/src/3rdparty/chromium/third_party/angle/util/util_export.h
+++ b/src/3rdparty/chromium/third_party/angle/util/util_export.h
@@ -12,7 +12,7 @@
 // We define "IMPLEMENTATION" to get the dllexport label when compiling the
 // util library. Consumers get the dllimport label by default.
 #if !defined(ANGLE_UTIL_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(LIBANGLE_UTIL_IMPLEMENTATION)
 #            define ANGLE_UTIL_EXPORT __declspec(dllexport)
 #        else

diff --git a/src/3rdparty/chromium/tools/grit/grit/tool/build.py b/src/3rdparty/chromium/tools/grit/grit/tool/build.py
index f3f61c4..e3ef44c 100644
--- a/src/3rdparty/chromium/tools/grit/grit/tool/build.py
+++ b/src/3rdparty/chromium/tools/grit/grit/tool/build.py
@@ -362,6 +362,10 @@ are exported to translation interchange files (e.g. XMB files), etc.
                        'chrome_messages_json_gzip', 'policy_templates'):
       return 'utf_8'
     # TODO(gfeher) modify here to set utf-8 encoding for admx/adml
+    if sys.platform == 'win32' and 'GCC' in sys.version:
+      # windres cannot handle utf-16 encoding
+      if output_type == 'rc_all':
+        return 'utf_8'
     return 'utf_16'
 
   def Process(self):
diff --git a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
index 760386e..7ccebb9 100644
--- a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
+++ b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
@@ -85,6 +85,9 @@ group("telemetry_chrome_test") {
       "//build/win:copy_cdb_to_output",
       "//third_party/crashpad/crashpad/tools:crashpad_database_util",
     ]
+    if (is_mingw) {
+      data_deps -= [ "//build/win:copy_cdb_to_output", ]
+    }
   }
 }
 
diff --git a/src/3rdparty/chromium/tools/protoc_wrapper/protoc_convert.py b/src/3rdparty/chromium/tools/protoc_wrapper/protoc_convert.py
index 4c730ce..22275f1 100644
--- a/src/3rdparty/chromium/tools/protoc_wrapper/protoc_convert.py
+++ b/src/3rdparty/chromium/tools/protoc_wrapper/protoc_convert.py
@@ -19,8 +19,8 @@ def Main():
                       help='Path to output file that will be used as stdout.')
   args, passthrough_args = parser.parse_known_args()
 
-  stdin = open(args.infile, 'r')
-  stdout = open(args.outfile, 'w')
+  stdin = open(args.infile, 'r', encoding='utf-8')
+  stdout = open(args.outfile, 'w', encoding='utf-8')
 
   subprocess.check_call([args.protoc] + passthrough_args, stdin=stdin,
       stdout=stdout)
diff --git a/src/3rdparty/chromium/tools/protoc_wrapper/protoc_wrapper.py b/src/3rdparty/chromium/tools/protoc_wrapper/protoc_wrapper.py
index d339b34..8373a2c 100755
--- a/src/3rdparty/chromium/tools/protoc_wrapper/protoc_wrapper.py
+++ b/src/3rdparty/chromium/tools/protoc_wrapper/protoc_wrapper.py
@@ -53,7 +53,7 @@ def WriteIncludes(headers, include):
   for filename in headers:
     include_point_found = False
     contents = []
-    with open(filename) as f:
+    with open(filename, 'r', encoding='utf-8') as f:
       for line in f:
         stripped_line = line.strip()
         contents.append(stripped_line)
@@ -68,7 +68,7 @@ def WriteIncludes(headers, include):
         raise RuntimeError("Include point not found in header: "
                            "{0} .".format(filename))
 
-    with open(filename, "w") as f:
+    with open(filename, 'w', encoding='utf-8') as f:
       for line in contents:
         print(line, file=f)
 
diff --git a/src/3rdparty/chromium/tools/typescript/ts_library.py b/src/3rdparty/chromium/tools/typescript/ts_library.py
index 4dbbb44..d00f742 100644
--- a/src/3rdparty/chromium/tools/typescript/ts_library.py
+++ b/src/3rdparty/chromium/tools/typescript/ts_library.py
@@ -177,8 +177,11 @@ def main(argv):
       assert isMappingAllowed(is_ash_target, target_path, mapping_path), \
           f'Cannot use mapping to Ash-specific folder {mapping_path} from ' \
           f'non-Ash target {target_path}'
-      path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
+      # Avoid 'IndexError: list out of range' error
+      if len(mapping) > 1:
+        path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
 
+  tsconfig['compilerOptions']['baseUrl'] = '.'
   tsconfig['compilerOptions']['paths'] = path_mappings
 
   tsconfig_file = f'tsconfig_{args.output_suffix}.json'
diff --git a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
index 35c8c60..113368e 100644
--- a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
+++ b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
@@ -117,7 +117,7 @@ if (use_v8_context_snapshot) {
   # disable it while taking a V8 snapshot.
   config("disable_icf") {
     visibility = [ ":*" ]  # Only targets in this file can depend on this.
-    if (is_win) {
+    if (is_msvc) {
       ldflags = [ "/OPT:NOICF" ]  # link.exe, but also lld-link.exe.
     } else if (is_apple && !use_lld) {
       ldflags = [ "-Wl,-no_deduplicate" ]  # ld64.
diff --git a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
index 3e13d74..e952c11 100644
--- a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
+++ b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
@@ -20,11 +20,15 @@ assert(is_win)
 config("chrome") {
   # chrome.natvis listed as an input in //base:base to guarantee relinking on
   # changes.
-  ldflags = [ "/NATVIS:" + rebase_path("chrome.natvis", root_build_dir) ]
+  if (is_msvc) {
+    ldflags = [ "/NATVIS:" + rebase_path("chrome.natvis", root_build_dir) ]
+  }
 }
 
 config("blink") {
   # blink.natvis listed as an input in
   # //third_party/blink/renderer/platform/wtf to guarantee relinking on changes.
-  ldflags = [ "/NATVIS:" + rebase_path("blink.natvis", root_build_dir) ]
+  if (is_msvc) {
+    ldflags = [ "/NATVIS:" + rebase_path("blink.natvis", root_build_dir) ]
+  }
 }

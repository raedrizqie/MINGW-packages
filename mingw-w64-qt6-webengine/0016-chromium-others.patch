diff --git a/src/3rdparty/chromium/crypto/BUILD.gn b/src/3rdparty/chromium/crypto/BUILD.gn
index bf39871..6dc2a99 100644
--- a/src/3rdparty/chromium/crypto/BUILD.gn
+++ b/src/3rdparty/chromium/crypto/BUILD.gn
@@ -110,7 +110,11 @@ component("crypto") {
       "unexportable_key_win.h",
       "user_verifying_key_win.cc",
     ]
-    libs = [ "ncrypt.lib" ]
+    if (is_mingw) {
+      libs = [ "ncrypt" ]
+    } else {
+      libs = [ "ncrypt.lib" ]
+    }
   }
 
   # Some files are built when NSS is used for the platform certificate library.
diff --git a/src/3rdparty/chromium/crypto/unexportable_key_win.cc b/src/3rdparty/chromium/crypto/unexportable_key_win.cc
index f904b67..29897ca 100644
--- a/src/3rdparty/chromium/crypto/unexportable_key_win.cc
+++ b/src/3rdparty/chromium/crypto/unexportable_key_win.cc
@@ -177,6 +177,7 @@ std::optional<std::vector<uint8_t>> GetP256ECDSASPKI(NCRYPT_KEY_HANDLE key) {
     return std::nullopt;
   }
 
+#if !defined(COMPILER_GCC) // FIXME: missing NCRYPT_ECC_CURVE_NAME_PROPERTY
   // Sometimes NCrypt will return a generic dwMagic even when asked for a P-256
   // key. In that case, do extra validation to make sure that `key` is in fact
   // a P-256 key.
@@ -193,6 +194,7 @@ std::optional<std::vector<uint8_t>> GetP256ECDSASPKI(NCRYPT_KEY_HANDLE key) {
       return std::nullopt;
     }
   }
+#endif
 
   uint8_t x962[1 + 32 + 32];
   x962[0] = POINT_CONVERSION_UNCOMPRESSED;
@@ -707,6 +709,7 @@ class VirtualUnexportableKeyProviderWin
       return nullptr;
     }
 
+#if !defined(COMPILER_GCC) // FIXME: missing NCRYPT_USE_VIRTUAL_ISOLATION_FLAG
     ScopedNCryptKey key;
     {
       SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY();
@@ -748,6 +751,7 @@ class VirtualUnexportableKeyProviderWin
       default:
         return nullptr;
     }
+#endif
   }
 
   std::unique_ptr<VirtualUnexportableSigningKey> FromKeyName(
diff --git a/src/3rdparty/chromium/skia/BUILD.gn b/src/3rdparty/chromium/skia/BUILD.gn
index c9c09df..82bfac3 100644
--- a/src/3rdparty/chromium/skia/BUILD.gn
+++ b/src/3rdparty/chromium/skia/BUILD.gn
@@ -416,7 +416,9 @@ component("skia") {
   # Remove unused util sources.
   sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
 
-  if (is_win) {
+  if (is_mingw) {
+    libs = [ "fontsub" ]
+  } else {
     libs = [ "fontsub.lib" ]
   }
 
@@ -705,10 +707,14 @@ template("skia_source_set") {
       configs -= [ "//build/config/compiler:afdo_optimize_size" ]
     }
     if (is_win) {
-      cflags_cc = [
-        "/wd5041",  # out-of-line definition for constexpr static data member is
-                    # not needed and is deprecated in C++17
-      ]
+      if (is_mingw) {
+        cflags_cc = [ "-Wno-missing-field-initializers" ]
+      } else {
+        cflags_cc = [
+          "/wd5041",  # out-of-line definition for constexpr static data member is
+                      # not needed and is deprecated in C++17
+        ]
+      }
     }
   }
 }
@@ -739,7 +745,7 @@ skia_source_set("skia_core_and_effects") {
 if (current_cpu == "x86" || current_cpu == "x64") {
   skia_source_set("skia_opts_hsw") {
     sources = skia_opts.hsw_sources
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-mavx2",
         "-mbmi",
@@ -814,7 +820,7 @@ skia_source_set("skia_opts") {
 if (current_cpu == "x64") {
   skia_source_set("skcms_TransformHsw") {
     sources = skcms_TransformHsw
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-w",
         "-mavx2",
@@ -828,7 +834,7 @@ if (current_cpu == "x64") {
   }
   skia_source_set("skcms_TransformSkx") {
     sources = skcms_TransformSkx
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-w",
         "-mavx512f",
@@ -855,7 +861,7 @@ if (current_cpu == "x64") {
 }
 
 source_set("skcms_TransformBaseline_and_public") {
-  if (!is_win || is_clang) {
+  if (!is_msvc || is_clang) {
     cflags = [
       "-w",
       "-std=c11",
diff --git a/src/3rdparty/chromium/sql/sqlite_result_code.cc b/src/3rdparty/chromium/sql/sqlite_result_code.cc
index ea8cfb2..b4da953 100644
--- a/src/3rdparty/chromium/sql/sqlite_result_code.cc
+++ b/src/3rdparty/chromium/sql/sqlite_result_code.cc
@@ -158,7 +158,7 @@ constexpr SqliteResultCodeMappingEntry kResultCodeMapping[] = {
     {SQLITE_ERROR_SNAPSHOT,
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SNAPSHOT
-#error "This code assumes that Chrome does not use sqlite3_snapshot_open()"
+#error This code assumes that Chrome does not use sqlite3_snapshot_open()
 #endif
 
     // Chrome does not use blocking Posix advisory file lock requests.
@@ -166,8 +166,8 @@ constexpr SqliteResultCodeMappingEntry kResultCodeMapping[] = {
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SETLK_TIMEOUT
 #error \
-    "This code assumes that Chrome does not use blocking Posix advisory \
-file lock requests"
+    This code assumes that Chrome does not use blocking Posix advisory \
+file lock requests
 #endif
 
     {SQLITE_READONLY_ROLLBACK,

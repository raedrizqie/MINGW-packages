diff --git a/src/3rdparty/chromium/ui/accessibility/ax_text_attributes.h b/src/3rdparty/chromium/ui/accessibility/ax_text_attributes.h
index 4c05e5a..72b67ba 100644
--- a/src/3rdparty/chromium/ui/accessibility/ax_text_attributes.h
+++ b/src/3rdparty/chromium/ui/accessibility/ax_text_attributes.h
@@ -5,6 +5,7 @@
 #ifndef UI_ACCESSIBILITY_AX_TEXT_ATTRIBUTES_H_
 #define UI_ACCESSIBILITY_AX_TEXT_ATTRIBUTES_H_
 
+#include <cstdint>
 #include <string>
 #include <vector>
 
diff --git a/src/3rdparty/chromium/ui/aura/BUILD.gn b/src/3rdparty/chromium/ui/aura/BUILD.gn
index 72fa0e0..bc08ecf 100644
--- a/src/3rdparty/chromium/ui/aura/BUILD.gn
+++ b/src/3rdparty/chromium/ui/aura/BUILD.gn
@@ -166,7 +166,12 @@ jumbo_component("aura") {
     ]
   }
 
-  if (is_win) {
+  if (is_mingw) {
+    libs = [
+      "wtsapi32",
+      "dwmapi",
+    ]
+  } else {
     libs = [
       "wtsapi32.lib",
       "dwmapi.lib",
diff --git a/src/3rdparty/chromium/ui/base/BUILD.gn b/src/3rdparty/chromium/ui/base/BUILD.gn
index 3605556..31c8d89 100644
--- a/src/3rdparty/chromium/ui/base/BUILD.gn
+++ b/src/3rdparty/chromium/ui/base/BUILD.gn
@@ -306,11 +306,19 @@ jumbo_component("base") {
       "win/window_event_target.cc",
       "win/window_event_target.h",
     ]
-    ldflags = [ "/DELAYLOAD:dwmapi.dll" ]
-    libs += [
-      "dwmapi.lib",
-      "wtsapi32.lib",
-    ]
+    if (is_mingw) {
+      cflags_cc = [ "-Wno-sign-conversion" ]
+      libs += [
+        "dwmapi",
+        "wtsapi32",
+      ]
+    } else {
+      ldflags = [ "/DELAYLOAD:dwmapi.dll" ]
+      libs += [
+        "dwmapi.lib",
+        "wtsapi32.lib",
+      ]
+    }
   }
 
   if (is_mac) {
diff --git a/src/3rdparty/chromium/ui/base/ime/init/input_method_factory.cc b/src/3rdparty/chromium/ui/base/ime/init/input_method_factory.cc
index c99fd18..a30da75 100644
--- a/src/3rdparty/chromium/ui/base/ime/init/input_method_factory.cc
+++ b/src/3rdparty/chromium/ui/base/ime/init/input_method_factory.cc
@@ -12,7 +12,7 @@
 #include "ui/base/ui_base_features.h"
 #include "ui/gfx/switches.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/base/ime/win/input_method_win_tsf.h"
 #elif BUILDFLAG(IS_APPLE)
 #include "ui/base/ime/mac/input_method_mac.h"
@@ -52,7 +52,7 @@ std::unique_ptr<InputMethod> CreateInputMethod(
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kHeadless))
     return base::WrapUnique(new MockInputMethod(ime_key_event_dispatcher));
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   return std::make_unique<InputMethodWinTSF>(ime_key_event_dispatcher, widget);
 #elif BUILDFLAG(IS_APPLE)
   return std::make_unique<InputMethodMac>(ime_key_event_dispatcher);
diff --git a/src/3rdparty/chromium/ui/base/ime/init/input_method_initializer.cc b/src/3rdparty/chromium/ui/base/ime/init/input_method_initializer.cc
index a500669..245ddbe 100644
--- a/src/3rdparty/chromium/ui/base/ime/init/input_method_initializer.cc
+++ b/src/3rdparty/chromium/ui/base/ime/init/input_method_initializer.cc
@@ -21,13 +21,13 @@
 namespace ui {
 
 void InitializeInputMethod() {
-#if !BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(IS_WIN)
+#if !BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(IS_MSVC)
   TSFBridge::Initialize();
 #endif
 }
 
 void ShutdownInputMethod() {
-#if !BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(IS_WIN)
+#if !BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(IS_MSVC)
   TSFBridge::Shutdown();
 #endif
 }
@@ -39,7 +39,7 @@ void InitializeInputMethodForTesting() {
                               -> std::unique_ptr<LinuxInputMethodContext> {
         return std::make_unique<FakeInputMethodContext>();
       });
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   TSFBridge::InitializeForTesting();
 #endif
 }
@@ -50,7 +50,7 @@ void ShutdownInputMethodForTesting() {
   // The function owns the factory (as a static variable that's returned by
   // reference), so setting this to an empty factory will free the old one.
   GetInputMethodContextFactoryForTest() = LinuxInputMethodContextFactory();
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   TSFBridge::Shutdown();
 #endif
 }
diff --git a/src/3rdparty/chromium/ui/base/ime/input_method.h b/src/3rdparty/chromium/ui/base/ime/input_method.h
index 03d9c95..74c0d32 100644
--- a/src/3rdparty/chromium/ui/base/ime/input_method.h
+++ b/src/3rdparty/chromium/ui/base/ime/input_method.h
@@ -47,7 +47,7 @@ class TextInputClient;
 // ui::InputMethod and owns it.
 class InputMethod {
  public:
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   typedef LRESULT NativeEventResult;
 #else
   typedef int32_t NativeEventResult;
@@ -66,7 +66,7 @@ class InputMethod {
   // Called when the top-level system window loses keyboard focus.
   virtual void OnBlur() = 0;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   // Called when the focused window receives native IME messages that are not
   // translated into other predefined event callbacks. Currently this method is
   // used only for IME functionalities specific to Windows.
diff --git a/src/3rdparty/chromium/ui/base/ime/mock_input_method.cc b/src/3rdparty/chromium/ui/base/ime/mock_input_method.cc
index 35fa2b6..fac8167 100644
--- a/src/3rdparty/chromium/ui/base/ime/mock_input_method.cc
+++ b/src/3rdparty/chromium/ui/base/ime/mock_input_method.cc
@@ -70,7 +70,7 @@ void MockInputMethod::OnBlur() {
     observer.OnBlur();
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 bool MockInputMethod::OnUntranslatedIMEMessage(const CHROME_MSG event,
                                                NativeEventResult* result) {
   if (result)
diff --git a/src/3rdparty/chromium/ui/base/ime/mock_input_method.h b/src/3rdparty/chromium/ui/base/ime/mock_input_method.h
index aa57ed6..c88e910 100644
--- a/src/3rdparty/chromium/ui/base/ime/mock_input_method.h
+++ b/src/3rdparty/chromium/ui/base/ime/mock_input_method.h
@@ -38,7 +38,7 @@ class COMPONENT_EXPORT(UI_BASE_IME) MockInputMethod : public InputMethod {
   void OnFocus() override;
   void OnBlur() override;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   bool OnUntranslatedIMEMessage(const CHROME_MSG event,
                                 NativeEventResult* result) override;
   void OnInputLocaleChanged() override;
diff --git a/src/3rdparty/chromium/ui/base/ime/win/BUILD.gn b/src/3rdparty/chromium/ui/base/ime/win/BUILD.gn
index 18db932..2719ed5 100644
--- a/src/3rdparty/chromium/ui/base/ime/win/BUILD.gn
+++ b/src/3rdparty/chromium/ui/base/ime/win/BUILD.gn
@@ -30,7 +30,24 @@ jumbo_component("win") {
     "virtual_keyboard_debounce_timer.cc",
     "virtual_keyboard_debounce_timer.h",
   ]
-  jumbo_excluded_sources = [ "tsf_text_store.cc" ]
+  if (is_mingw) {
+    sources -= [
+      "input_method_win_tsf.cc",
+      "input_method_win_tsf.h",
+      "on_screen_keyboard_display_manager_input_pane.cc", # requires <wrl/event.h>
+      "on_screen_keyboard_display_manager_input_pane.h",
+      "tsf_bridge.cc",
+      "tsf_bridge.h",
+      "tsf_event_router.cc",
+      "tsf_event_router.h",
+      "tsf_input_scope.cc",
+      "tsf_input_scope.h",
+      "tsf_text_store.cc",
+      "tsf_text_store.h",
+    ]
+  } else {
+    jumbo_excluded_sources = [ "tsf_text_store.cc" ]
+  }
 
   defines = [ "IS_UI_BASE_IME_WIN_IMPL" ]
 
diff --git a/src/3rdparty/chromium/ui/base/ime/win/input_method_win_base.cc b/src/3rdparty/chromium/ui/base/ime/win/input_method_win_base.cc
index a21238e..aaf5886 100644
--- a/src/3rdparty/chromium/ui/base/ime/win/input_method_win_base.cc
+++ b/src/3rdparty/chromium/ui/base/ime/win/input_method_win_base.cc
@@ -42,10 +42,14 @@ constexpr size_t kExtraNumberOfChars = 20;
 
 std::unique_ptr<VirtualKeyboardController> CreateKeyboardController(
     HWND attached_window_handle) {
+#if defined(COMPILER_MSVC)
   if (base::win::GetVersion() >= base::win::Version::WIN10_RS4) {
     return std::make_unique<OnScreenKeyboardDisplayManagerInputPane>(
         attached_window_handle);
   } else {
+#else
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+#endif
     return std::make_unique<OnScreenKeyboardDisplayManagerTabTip>(
         attached_window_handle);
   }
diff --git a/src/3rdparty/chromium/ui/base/ime/win/on_screen_keyboard_display_manager_input_pane.h b/src/3rdparty/chromium/ui/base/ime/win/on_screen_keyboard_display_manager_input_pane.h
index f89b23d..e43e369 100644
--- a/src/3rdparty/chromium/ui/base/ime/win/on_screen_keyboard_display_manager_input_pane.h
+++ b/src/3rdparty/chromium/ui/base/ime/win/on_screen_keyboard_display_manager_input_pane.h
@@ -5,6 +5,8 @@
 #ifndef UI_BASE_IME_WIN_ON_SCREEN_KEYBOARD_DISPLAY_MANAGER_INPUT_PANE_H_
 #define UI_BASE_IME_WIN_ON_SCREEN_KEYBOARD_DISPLAY_MANAGER_INPUT_PANE_H_
 
+#if defined(COMPILER_MSVC)
+
 #include <inputpaneinterop.h>
 #include <windows.ui.viewmanagement.h>
 #include <wrl/client.h>
@@ -83,4 +85,6 @@ class COMPONENT_EXPORT(UI_BASE_IME_WIN)
 
 }  // namespace ui
 
+#endif // COMPILER_MSVC
+
 #endif  // UI_BASE_IME_WIN_ON_SCREEN_KEYBOARD_DISPLAY_MANAGER_INPUT_PANE_H_
diff --git a/src/3rdparty/chromium/ui/display/BUILD.gn b/src/3rdparty/chromium/ui/display/BUILD.gn
index 5d077c2..b904b48 100644
--- a/src/3rdparty/chromium/ui/display/BUILD.gn
+++ b/src/3rdparty/chromium/ui/display/BUILD.gn
@@ -102,6 +102,12 @@ jumbo_component("display") {
       "win/uwp_text_scale_factor.cc",
       "win/uwp_text_scale_factor.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "win/uwp_text_scale_factor.cc",
+        "win/uwp_text_scale_factor.h",
+      ]
+    }
   }
 
   if (is_ios) {
@@ -139,8 +145,12 @@ jumbo_component("display") {
     # Don't conflict with Windows' "display.dll".
     output_name = "ui_display"
     deps += [ "//ui/gfx/mojom:dxgi_info" ]
-    libs = [ "shcore.lib" ]
-    ldflags = [ "/DELAYLOAD:shcore.dll" ]
+    if (is_mingw) {
+      libs = [ "shcore" ]
+    } else {
+      libs = [ "shcore.lib" ]
+      ldflags = [ "/DELAYLOAD:shcore.dll" ]
+    }
   }
 
   if (use_aura) {
diff --git a/src/3rdparty/chromium/ui/display/win/dpi.cc b/src/3rdparty/chromium/ui/display/win/dpi.cc
index cc3c603..2e91de8 100644
--- a/src/3rdparty/chromium/ui/display/win/dpi.cc
+++ b/src/3rdparty/chromium/ui/display/win/dpi.cc
@@ -8,7 +8,9 @@
 
 #include "base/win/scoped_hdc.h"
 #include "ui/display/display.h"
+#if defined(COMPILER_MSVC)
 #include "ui/display/win/uwp_text_scale_factor.h"
+#endif
 
 namespace display {
 namespace win {
@@ -37,7 +39,9 @@ int GetDPIFromScalingFactor(float device_scaling_factor) {
 }
 
 double GetAccessibilityFontScale() {
+#if defined(COMPILER_MSVC)
   return 1.0 / UwpTextScaleFactor::Instance()->GetTextScaleFactor();
+#endif
 }
 
 namespace internal {
diff --git a/src/3rdparty/chromium/ui/display/win/screen_win.cc b/src/3rdparty/chromium/ui/display/win/screen_win.cc
index db01034..7f27f0c 100644
--- a/src/3rdparty/chromium/ui/display/win/screen_win.cc
+++ b/src/3rdparty/chromium/ui/display/win/screen_win.cc
@@ -63,9 +63,13 @@ std::optional<int> GetPerMonitorDPI(HMONITOR monitor) {
 
 float GetScaleFactorForDPI(int dpi, bool include_accessibility) {
   const float scale = display::win::internal::GetScalingFactorFromDPI(dpi);
+#if defined(COMPILER_MSVC)
   return include_accessibility
              ? (scale * UwpTextScaleFactor::Instance()->GetTextScaleFactor())
              : scale;
+#else
+  return scale;
+#endif
 }
 
 // Gets the raw monitor scale factor.
@@ -930,10 +934,12 @@ void ScreenWin::Initialize() {
   UpdateFromDisplayInfos(GetDisplayInfosFromSystem());
   RecordDisplayScaleFactors();
 
+#if defined(COMPILER_MSVC)
   // We want to remember that we've observed a screen metrics object so that we
   // can remove ourselves as an observer at some later point (either when the
   // metrics object notifies us it's going away or when we are destructed).
   scale_factor_observation_.Observe(UwpTextScaleFactor::Instance());
+#endif
 }
 
 MONITORINFOEX ScreenWin::MonitorInfoFromScreenPoint(
@@ -1119,6 +1125,7 @@ void ScreenWin::RecordDisplayScaleFactors() const {
   }
 }
 
+#if defined(COMPILER_MSVC)
 void ScreenWin::OnUwpTextScaleFactorChanged() {
   UpdateAllDisplaysAndNotify();
 }
@@ -1127,6 +1134,7 @@ void ScreenWin::OnUwpTextScaleFactorCleanup(UwpTextScaleFactor* source) {
   scale_factor_observation_.Reset();
   UwpTextScaleFactor::Observer::OnUwpTextScaleFactorCleanup(source);
 }
+#endif
 
 bool ScreenWin::PerProcessDPIAwarenessDisabledForTesting() const {
   return per_process_dpi_awareness_disabled_for_testing_;
diff --git a/src/3rdparty/chromium/ui/display/win/screen_win.h b/src/3rdparty/chromium/ui/display/win/screen_win.h
index 788451e..1ca3921 100644
--- a/src/3rdparty/chromium/ui/display/win/screen_win.h
+++ b/src/3rdparty/chromium/ui/display/win/screen_win.h
@@ -39,8 +39,12 @@ class DisplayInfo;
 }  // namespace internal
 
 class DISPLAY_EXPORT ScreenWin : public Screen,
+#if defined(COMPILER_MSVC)
                                  public ColorProfileReader::Client,
                                  public UwpTextScaleFactor::Observer {
+#else
+                                 public ColorProfileReader::Client {
+#endif
  public:
   ScreenWin();
 
@@ -272,8 +276,10 @@ class DISPLAY_EXPORT ScreenWin : public Screen,
   //-----------------------------------------------------------------
   // UwpTextScaleFactor::Observer:
 
+#if defined(COMPILER_MSVC)
   void OnUwpTextScaleFactorChanged() override;
   void OnUwpTextScaleFactorCleanup(UwpTextScaleFactor* source) override;
+#endif
 
   // Tests don't want to use the actual DPI settings of the monitor(s) on
   // the machine running the test.
@@ -303,8 +309,10 @@ class DISPLAY_EXPORT ScreenWin : public Screen,
   // Information gathered from DXGI adapters and outputs.
   gfx::mojom::DXGIInfoPtr dxgi_info_;
 
+#if defined(COMPILER_MSVC)
   base::ScopedObservation<UwpTextScaleFactor, UwpTextScaleFactor::Observer>
       scale_factor_observation_{this};
+#endif
 
   // Used to avoid calling GetSystemMetricsForDpi in unit tests.
   bool per_process_dpi_awareness_disabled_for_testing_ = false;
diff --git a/src/3rdparty/chromium/ui/events/BUILD.gn b/src/3rdparty/chromium/ui/events/BUILD.gn
index 5b6fddb..14d4cd1 100644
--- a/src/3rdparty/chromium/ui/events/BUILD.gn
+++ b/src/3rdparty/chromium/ui/events/BUILD.gn
@@ -493,6 +493,10 @@ jumbo_component("gesture_detection") {
 
   defines = [ "GESTURE_DETECTION_IMPLEMENTATION" ]
 
+  if (is_mingw && is_clang) {
+    cflags_cc = [ "-Wno-vla-cxx-extension" ]
+  }
+
   if (is_android) {
     sources += [ "gesture_detection/gesture_configuration_android.cc" ]
   } else if (is_ios) {
diff --git a/src/3rdparty/chromium/ui/gfx/BUILD.gn b/src/3rdparty/chromium/ui/gfx/BUILD.gn
index 09f14f7..dbf96e9 100644
--- a/src/3rdparty/chromium/ui/gfx/BUILD.gn
+++ b/src/3rdparty/chromium/ui/gfx/BUILD.gn
@@ -63,10 +63,12 @@ if (is_win) {
   config("gfx_win_linker_flags") {
     # This is in a separate config so the flags can be applied to dependents.
     # ldflags in GN aren't automatically inherited.
-    ldflags = [
-      # Linking with OneCore.lib causes the following dlls to load.
-      "/DELAYLOAD:api-ms-win-core-handle-l1-1-0.dll",
-    ]
+    if (is_msvc) {
+      ldflags = [
+        # Linking with OneCore.lib causes the following dlls to load.
+        "/DELAYLOAD:api-ms-win-core-handle-l1-1-0.dll",
+      ]
+    }
   }
 }
 
@@ -242,6 +244,14 @@ jumbo_component("gfx") {
       "win/window_impl.cc",
       "win/window_impl.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "win/d3d_shared_fence.cc",
+        "win/d3d_shared_fence.h",
+        "win/text_analysis_source.cc",
+        "win/text_analysis_source.h"
+      ]
+    }
   }
   if (is_apple) {
     sources += [ "font_render_params_mac.cc" ]
@@ -399,12 +409,21 @@ jumbo_component("gfx") {
   # Windows.
   if (is_win) {
     deps += [ "//ui/base:features" ]
-    libs = [
-      "setupapi.lib",
-      "dwmapi.lib",
-      "dwrite.lib",
-      "onecore.lib",
-    ]
+    if (is_mingw) {
+      libs = [
+        "setupapi",
+        "dwmapi",
+        "dwrite",
+        "onecore",
+      ]
+    } else {
+      libs = [
+        "setupapi.lib",
+        "dwmapi.lib",
+        "dwrite.lib",
+        "onecore.lib",
+      ]
+    }
 
     all_dependent_configs = [ ":gfx_win_linker_flags" ]
     public_deps += [ "//components/crash/core/common" ]
diff --git a/src/3rdparty/chromium/ui/gfx/codec/BUILD.gn b/src/3rdparty/chromium/ui/gfx/codec/BUILD.gn
index 416a792..d4c528b 100644
--- a/src/3rdparty/chromium/ui/gfx/codec/BUILD.gn
+++ b/src/3rdparty/chromium/ui/gfx/codec/BUILD.gn
@@ -37,7 +37,7 @@ jumbo_component("codec") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     cflags = [ "/wd4324" ]  # Structure was padded due to __declspec(align()),
                             # which is uninteresting.
   }
diff --git a/src/3rdparty/chromium/ui/gl/BUILD.gn b/src/3rdparty/chromium/ui/gl/BUILD.gn
index 076b15d..0202d53 100644
--- a/src/3rdparty/chromium/ui/gl/BUILD.gn
+++ b/src/3rdparty/chromium/ui/gl/BUILD.gn
@@ -265,15 +265,25 @@ jumbo_component("gl") {
       "vsync_thread_win.h",
     ]
 
-    libs = [
-      "dxgi.lib",
-      "dxguid.lib",
-      "dwmapi.lib",
-    ]
-    ldflags = [
-      "/DELAYLOAD:dwmapi.dll",
-      "/DELAYLOAD:dxgi.dll",
-    ]
+    if (is_mingw) {
+      configs -= [ "//build/config/compiler:no_rtti" ]
+      configs += [ "//build/config/compiler:rtti" ]
+      libs = [
+        "dxgi",
+        "dxguid",
+        "dwmapi",
+      ]
+    } else {
+      libs = [
+        "dxgi.lib",
+        "dxguid.lib",
+        "dwmapi.lib",
+      ]
+      ldflags = [
+        "/DELAYLOAD:dwmapi.dll",
+        "/DELAYLOAD:dxgi.dll",
+      ]
+    }
     deps += [
       "//ui/base",
       "//ui/display:display",
diff --git a/src/3rdparty/chromium/ui/gl/dc_layer_tree.cc b/src/3rdparty/chromium/ui/gl/dc_layer_tree.cc
index 15cbe12..4cf7fe0 100644
--- a/src/3rdparty/chromium/ui/gl/dc_layer_tree.cc
+++ b/src/3rdparty/chromium/ui/gl/dc_layer_tree.cc
@@ -30,6 +30,7 @@ bool NeedSwapChainPresenter(const DCLayerOverlayParams* overlay) {
                                        DCLayerOverlayType::kDCompVisualContent;
 }
 
+#if !defined(COMPILER_GCC) // FIXME: missing Microsoft::WRL::ComPtr<IDCompositionVisual3>
 // Unconditionally get a IDCompositionVisual2 as a IDCompositionVisual3.
 //
 // |IDCompositionVisual3| should be available since Windows 8.1, but we noticed
@@ -66,6 +67,7 @@ D2D_MATRIX_4X4_F TransformToD2D_MATRIX_4X4_F(const gfx::Transform& transform) {
                           t.rc(0, 2), t.rc(1, 2), t.rc(2, 2), t.rc(3, 2),
                           t.rc(0, 3), t.rc(1, 3), t.rc(2, 3), t.rc(3, 3));
 }
+#endif
 
 // The size the surfaces in the pool. Used in |VisualSubtree::Update| to
 // determine how to scale the background color visual. This can be any size
@@ -606,6 +608,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
     }
   }
 
+#if !defined(COMPILER_GCC)
   if (opacity_changed) {
     if (opacity_ != 1) {
       hr = CheckedCastToVisual3(clip_visual_)->SetOpacity(opacity_);
@@ -622,6 +625,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
       CHECK_EQ(hr, S_OK);
     }
   }
+#endif
 
   if (rounded_corner_bounds_changed) {
     if (!rounded_corner_bounds_.IsEmpty()) {
@@ -684,6 +688,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
     }
   }
 
+#if !defined(COMPILER_GCC)
   if (quad_to_root_transform_changed) {
     if (quad_to_root_transform_.Is2dTransform()) {
       const D2D_MATRIX_3X2_F matrix =
@@ -698,6 +703,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
       CHECK_EQ(hr, S_OK);
     }
   }
+#endif
 
   if (nearest_neighbor_filter_changed) {
     hr = transform_visual_->SetBitmapInterpolationMode(
@@ -764,6 +770,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
     // update. No visual changes are needed in this case.
   }
 
+#if !defined(COMPILER_GCC)
   if (quad_rect_changed || background_color_surface_changed ||
       background_color_changed) {
     if (!background_color_surface_ || background_color.fA == 0.0) {
@@ -787,6 +794,7 @@ bool DCLayerTree::VisualTree::VisualSubtree::Update(
       CHECK_EQ(hr, S_OK);
     }
   }
+#endif
 
   if (quad_to_root_transform_changed || quad_rect_changed ||
       allow_antialiasing_changed) {
@@ -1169,6 +1177,7 @@ void DCLayerTree::VisualTree::GetSwapChainVisualInfoForTesting(
 
 bool DCLayerTree::CommitAndClearPendingOverlays(
     std::vector<std::unique_ptr<DCLayerOverlayParams>> overlays) {
+#if !defined(COMPILER_GCC) // FIXME: missing Microsoft::WRL::ComPtr<IDXGISwapChain1>
   TRACE_EVENT1("gpu", "DCLayerTree::CommitAndClearPendingOverlays",
                "num_overlays", overlays.size());
 
@@ -1270,6 +1279,7 @@ bool DCLayerTree::CommitAndClearPendingOverlays(
   solid_color_surface_pool_->TrimAfterCommit();
 
   return status;
+#endif
 }
 
 size_t DCLayerTree::GetNumSurfacesInPoolForTesting() const {
diff --git a/src/3rdparty/chromium/ui/gl/init/BUILD.gn b/src/3rdparty/chromium/ui/gl/init/BUILD.gn
index f8fd6c7..ed77b43 100644
--- a/src/3rdparty/chromium/ui/gl/init/BUILD.gn
+++ b/src/3rdparty/chromium/ui/gl/init/BUILD.gn
@@ -52,8 +52,12 @@ jumbo_component("init") {
       "gl_initializer_win.cc",
     ]
 
-    libs = [ "dwmapi.lib" ]
-    ldflags = [ "/DELAYLOAD:dwmapi.dll" ]
+    if (is_mingw) {
+      libs = [ "dwmapi" ]
+    } else {
+      libs = [ "dwmapi.lib" ]
+      ldflags = [ "/DELAYLOAD:dwmapi.dll" ]
+    }
   } else if (is_mac) {
     sources += [
       "gl_factory_mac.cc",
diff --git a/src/3rdparty/chromium/ui/gl/swap_chain_presenter.cc b/src/3rdparty/chromium/ui/gl/swap_chain_presenter.cc
index 79e140a..e10454d 100644
--- a/src/3rdparty/chromium/ui/gl/swap_chain_presenter.cc
+++ b/src/3rdparty/chromium/ui/gl/swap_chain_presenter.cc
@@ -441,6 +441,7 @@ bool TryDisableDesktopPlane(IDXGIDecodeSwapChain* decode_swap_chain,
     return false;
   }
 
+#if defined(COMPILER_MSVC)
   // Set the target region to the specified rectangle if necessary.
   RECT target_region = target_rect.ToRECT();
   if (target_region != original_target_rect) {
@@ -452,6 +453,7 @@ bool TryDisableDesktopPlane(IDXGIDecodeSwapChain* decode_swap_chain,
       return false;
     }
   }
+#endif
 
   return true;
 }
diff --git a/src/3rdparty/chromium/ui/native_theme/BUILD.gn b/src/3rdparty/chromium/ui/native_theme/BUILD.gn
index bf24f99..dcf03d0 100644
--- a/src/3rdparty/chromium/ui/native_theme/BUILD.gn
+++ b/src/3rdparty/chromium/ui/native_theme/BUILD.gn
@@ -131,7 +131,11 @@ if (is_win) {
       "//ui/gfx",
     ]
 
-    libs = [ "uxtheme.lib" ]
+    if (is_mingw) {
+      libs = [ "uxtheme" ]
+    } else {
+      libs = [ "uxtheme.lib" ]
+    }
   }
 } else {
   source_set("native_theme_browser") {
diff --git a/src/3rdparty/chromium/ui/shell_dialogs/BUILD.gn b/src/3rdparty/chromium/ui/shell_dialogs/BUILD.gn
index 422241c..8f9c4af 100644
--- a/src/3rdparty/chromium/ui/shell_dialogs/BUILD.gn
+++ b/src/3rdparty/chromium/ui/shell_dialogs/BUILD.gn
@@ -42,7 +42,7 @@ jumbo_component("shell_dialogs") {
     "//url",
   ]
 
-  if (is_chromeos || is_castos) {
+  if (is_chromeos || is_castos || is_mingw) {
     sources += [ "shell_dialog_stub.cc" ]
   }
 
@@ -90,7 +90,7 @@ jumbo_component("shell_dialogs") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "auto_close_dialog_event_handler_win.cc",
       "auto_close_dialog_event_handler_win.h",
